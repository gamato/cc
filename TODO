

TODO
----

- generic msg replay avoidance

- logging reorg (global per-module log instead of self.log)

- regtests for basic functionality
- regtests for basic failures (whether crashes are logged properly)

- api: refactor zmq script w/ ioloop out
- api: common zmq socket tuning

task client side
----------------
- cmdline task client (demo / testing) - make async
- task param discovery

task poller
-----------
- daemon that periodically check for new tasks from db (pgq / polling)
- sends task under 'task.send' message type to CC which has 'taskrouter'
  handler configured.

task executor
-------------
- cc daemon that sends 'task.register' msg to CC with 'taskrouter' handler. (done)
- when it receives task, must execute corresponding script.

crypto
------
- user/server name in cert must be checked for username in message
  - define place in cert to have user
  - define name field in message
  - server: check if cert matches msg
  - server: check if user is authorized to access service
    (unrelated to crypto, except when we put access rights into cert)
  - make cert details available to python code (done)
- replayability fix (may not matter for info & log msgs), but is needed
  for confdb access:
  - client: have unique id for each message
  - client: have timestamp in message (done)
  - server: keep track of msgids for last 5m, drop dup messages
  - server: check message timestamp, drop old messages

